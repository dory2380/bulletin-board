{"ast":null,"code":"import _objectSpread from \"/home/dory/Documents/code/dory-learns-react/tutorial/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/dory/Documents/code/dory-learns-react/tutorial/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Person from './Person/Person';\nimport ErrorBoundary from './ErrorBoundary/ErrorBoundary';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      persons: [{\n        id: 'asd',\n        name: 'Max',\n        age: 29\n      }, {\n        id: 'sdf',\n        name: 'Manu',\n        age: 28\n      }, {\n        id: 'dfg',\n        name: 'Stephanie',\n        age: 20\n      }],\n      otherState: 'some other value',\n      showPersons: false\n    };\n\n    this.togglePersonsHandler = () => {\n      this.setState({\n        showPersons: !this.state.showPersons\n      });\n    };\n\n    this.nameChangedHandler = (event, id) => {\n      const personIndex = this.state.persons.findIndex(p => {\n        return p.id === id;\n      }); // const person = this.state.persons[personIndex]; is bad because references\n\n      const person = _objectSpread({}, this.state.persons[personIndex]);\n\n      person.name = event.target.value;\n      const updatedPersons = [...this.state.persons];\n      updatedPersons[personIndex] = person;\n      this.setState({\n        persons: updatedPersons\n      });\n    };\n\n    this.deletePersonHandler = personIndex => {\n      // const persons = this.state.persons.slice();\n      // slice copies the full array and returns a new one stored here.\n      const persons = [...this.state.persons]; // spread operator, reach out to state persons, speads out the elements inspect\n      // in the array into a list of elements that get added to this array\n\n      persons.splice(personIndex, 1); // removes 1 element from the array\n\n      this.setState({\n        persons: persons\n      });\n    };\n  }\n\n  render() {\n    let persons = null;\n    let btnClass = 'Red';\n    const style = {\n      backgroundColor: 'rgb(63,153,54)',\n      color: 'white',\n      font: 'inherit',\n      border: '1px solid grey',\n      padding: '8px',\n      cursor: 'pointer'\n    };\n\n    if (this.state.showPersons) {\n      persons = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, this.state.persons.map((person, index) => {\n        return React.createElement(ErrorBoundary, {\n          key: person.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, React.createElement(Person, {\n          click: () => this.deletePersonHandler(index),\n          name: person.name,\n          age: person.age,\n          changed: event => this.nameChangedHandler(event, person.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }));\n      })); // style.backgroundColor = 'rgb(190,0,0)';\n      // style[':hover']= {\n      //   backgroundColor: 'salmon',\n      //   color: 'black'\n      // }\n\n      btnClass = null;\n    } // let classes = ['red','bold'].join(' ');\n\n\n    const classes = [];\n\n    if (this.state.persons.length <= 2) {\n      classes.push('red'); // classes =['red']\n    }\n\n    if (this.state.persons.length <= 1) {\n      classes.push('bold'); //classes = ['red', 'bold']\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Hi I'm a React App\"), React.createElement(\"p\", {\n      className: classes.join(' '),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"This is really working!\"), React.createElement(\"button\", {\n      onClick: this.togglePersonsHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Toggle persons\"), persons);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/dory/Documents/code/dory-learns-react/tutorial/src/App.js"],"names":["React","Component","Person","ErrorBoundary","App","state","persons","id","name","age","otherState","showPersons","togglePersonsHandler","setState","nameChangedHandler","event","personIndex","findIndex","p","person","target","value","updatedPersons","deletePersonHandler","splice","render","btnClass","style","backgroundColor","color","font","border","padding","cursor","map","index","classes","length","push","join"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Person from './Person/Person';\nimport ErrorBoundary from './ErrorBoundary/ErrorBoundary'\n\n\nclass App extends Component {\n    state = {\n        persons: [\n            {id:'asd', name: 'Max', age: 29},\n            {id:'sdf', name: 'Manu', age: 28},\n            {id:'dfg', name: 'Stephanie', age: 20}\n        ],\n        otherState: 'some other value',\n        showPersons: false,\n    }\n\n    togglePersonsHandler = () => {\n      this.setState({\n        showPersons: !this.state.showPersons\n      });\n    }\n\n    // find is a deafult js method, also findIndex on every element in array\n    nameChangedHandler = (event, id) => {\n      const personIndex = this.state.persons.findIndex((p) => {\n        return p.id === id;\n      })\n\n      // const person = this.state.persons[personIndex]; is bad because references\n      const person = {\n        ...this.state.persons[personIndex]\n      }\n      person.name = event.target.value;\n      const updatedPersons = [...this.state.persons];\n      updatedPersons[personIndex] = person;\n\n      this.setState({persons: updatedPersons});\n    }\n\n    //best to update state in a immutable fashion, create copy, the change\n    //then update the state\n    deletePersonHandler = (personIndex) => {\n      // const persons = this.state.persons.slice();\n      // slice copies the full array and returns a new one stored here.\n\n      const persons = [...this.state.persons];\n      // spread operator, reach out to state persons, speads out the elements inspect\n      // in the array into a list of elements that get added to this array\n\n      persons.splice(personIndex, 1); // removes 1 element from the array\n      this.setState({persons: persons});\n    }\n\n  render() {\n    let persons = null;\n    let btnClass = 'Red';\n\n    const style = {\n        backgroundColor: 'rgb(63,153,54)',\n        color: 'white',\n        font: 'inherit',\n        border: '1px solid grey',\n        padding: '8px',\n        cursor: 'pointer',\n\n    }\n\n    if (this.state.showPersons) {\n      persons = (\n        <div>\n          {this.state.persons.map((person, index) => {\n            return <ErrorBoundary key={person.id}>\n              <Person\n                click={() => this.deletePersonHandler(index)}\n                name={person.name}\n                age={person.age}\n                changed={(event) => this.nameChangedHandler(event, person.id)}/>\n                </ErrorBoundary>\n          })}\n        </div>\n      );\n\n      // style.backgroundColor = 'rgb(190,0,0)';\n      // style[':hover']= {\n      //   backgroundColor: 'salmon',\n      //   color: 'black'\n      // }\n      btnClass = null;\n    }\n\n    // let classes = ['red','bold'].join(' ');\n    const classes = [];\n    if (this.state.persons.length <= 2) {\n      classes.push('red');// classes =['red']\n    }\n\n    if (this.state.persons.length <= 1) {\n      classes.push('bold'); //classes = ['red', 'bold']\n    }\n\n    return (\n      <div className=\"App\">\n        <h1>Hi I'm a React App</h1>\n        <p className={classes.join(' ')}>This is really working!</p>\n        <button onClick={this.togglePersonsHandler}>Toggle persons</button>\n        {persons}\n      </div>\n  \n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}